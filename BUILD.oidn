"""
    SPDX-FileCopyrightText: 2023 Julian Amann <dev@vertexwahn.de>
    SPDX-License-Identifier: Apache-2.0
"""

load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@rules_ispc//:ispc.bzl", "ispc_cc_library")

expand_template(
    name = "config",
    out = "include/OpenImageDenoise/config.h",
    substitutions = {
        "#cmakedefine OIDN_STATIC_LIB": "",
        "#cmakedefine OIDN_API_NAMESPACE": "",
        "@OIDN_VERSION_MAJOR@": "1",
        "@OIDN_VERSION_MINOR@": "4",
        "@OIDN_VERSION_PATCH@": "3",
        "@OIDN_VERSION_NUMBER@": "010403",
        "@OIDN_VERSION_NOTE": "muh",
    },
    template = "include/OpenImageDenoise/config.h.in",
)

ispc_cc_library(
    name = "input_reorder_ispc",
    srcs = [
        "core/color.isph",
        "core/image.isph",
        "core/input_reorder.ispc",
        "core/math.isph",
        "core/reorder.isph",
        "core/tensor.isph",
        "core/vec.isph",
    ],
    out = "input_reorder_ispc.h",
    ispc_main_source_file = "core/input_reorder.ispc",
)

ispc_cc_library(
    name = "color_ispc",
    srcs = [
        "core/color.ispc",
        "core/color.isph",
        "core/image.isph",
        "core/math.isph",
        "core/vec.isph",
    ],
    out = "color_ispc.h",
    ispc_main_source_file = "core/color.ispc",
)

ispc_cc_library(
    name = "output_copy_ispc",
    srcs = [
        "core/color.isph",
        "core/image.isph",
        "core/math.isph",
        "core/output_copy.ispc",
        "core/vec.isph",
    ],
    out = "output_copy_ispc.h",
    ispc_main_source_file = "core/output_copy.ispc",
)

ispc_cc_library(
    name = "upsample_ispc",
    srcs = [
        "core/color.isph",
        "core/image.isph",
        "core/math.isph",
        "core/tensor.isph",
        "core/upsample.ispc",
        "core/vec.isph",
    ],
    out = "upsample_ispc.h",
    ispc_main_source_file = "core/upsample.ispc",
)

ispc_cc_library(
    name = "output_reorder_ispc",
    srcs = [
        "core/color.isph",
        "core/image.isph",
        "core/math.isph",
        "core/output_reorder.ispc",
        "core/reorder.isph",
        "core/tensor.isph",
        "core/vec.isph",
    ],
    out = "output_reorder_ispc.h",
    ispc_main_source_file = "core/output_reorder.ispc",
)

cc_library(
    name = "common",
    srcs = [
        "common/barrier.h",
        "common/exception.h",
        "common/math.h",
        "common/platform.cpp",
        "common/platform.h",
        "common/ref.h",
        "common/tasking.cpp",
        "common/tasking.h",
        "common/thread.cpp",
        "common/thread.h",
        "common/timer.h",
        "include/OpenImageDenoise/config.h",  # generted
        "include/OpenImageDenoise/oidn.h",
        "include/OpenImageDenoise/oidn.hpp",
    ],
    includes = ["include/OpenImageDenoise"],
    deps = [
        "@mkl_dnn_v1//:mkl_dnn",
        "@oneTBB//:tbb",
    ],
)

cc_library(
    name = "OpenImageDenoise",
    srcs = [
        "core/api.cpp",
        "core/buffer.h",
        "core/color.cpp",
        "core/color.h",
        "core/common.h",
        "core/conv.h",
        "core/cpu_buffer.h",
        "core/cpu_device.cpp",
        "core/cpu_device.h",
        "core/data.h",
        "core/device.cpp",
        "core/device.h",
        "core/filter.cpp",
        "core/filter.h",
        "core/image.h",
        "core/input_reorder.cpp",
        "core/input_reorder.h",
        "core/network.cpp",
        "core/network.h",
        "core/node.h",
        "core/output_copy.cpp",
        "core/output_copy.h",
        "core/output_reorder.cpp",
        "core/output_reorder.h",
        "core/pool.h",
        "core/progress.h",
        "core/reorder.h",
        "core/scratch.cpp",
        "core/scratch.h",
        "core/tensor.h",
        "core/tza.cpp",
        "core/tza.h",
        "core/unet.cpp",
        "core/unet.h",
        "core/upsample.cpp",
        "core/upsample.h",
        "core/vec.h",
    ],
    hdrs = [
        "include/OpenImageDenoise/config.h",
        "include/OpenImageDenoise/oidn.h",
        "include/OpenImageDenoise/oidn.hpp",
    ],
    defines = [
        "OIDN_DNNL",
        "OIDN_STATIC_LIB",
    ],
    includes = [
        "core",
        "include",
    ],
    visibility = ["//visibility:public"],
    #textual_hdrs = [
    #"core/image.isph",
    #"core/input_reorder.ispc",
    #"core/color.isph",
    #"core/color.ispc",
    #"core/math.isph",
    #"core/upsample.ispc",
    #"core/output_copy.ispc",
    #"core/output_reorder.ispc",
    #"core/reorder.isph",
    #"core/tensor.isph",
    #"core/vec.isph",
    #],
    deps = [
        ":color_ispc",
        ":common",
        ":input_reorder_ispc",
        ":output_copy_ispc",
        ":output_reorder_ispc",
        ":upsample_ispc",
    ],
)
